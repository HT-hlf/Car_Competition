// Generated by gencpp from file ht_msg/Ht_d.msg
// DO NOT EDIT!


#ifndef HT_MSG_MESSAGE_HT_D_H
#define HT_MSG_MESSAGE_HT_D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ht_msg
{
template <class ContainerAllocator>
struct Ht_d_
{
  typedef Ht_d_<ContainerAllocator> Type;

  Ht_d_()
    : detect(false)  {
    }
  Ht_d_(const ContainerAllocator& _alloc)
    : detect(false)  {
  (void)_alloc;
    }



   typedef uint8_t _detect_type;
  _detect_type detect;





  typedef boost::shared_ptr< ::ht_msg::Ht_d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ht_msg::Ht_d_<ContainerAllocator> const> ConstPtr;

}; // struct Ht_d_

typedef ::ht_msg::Ht_d_<std::allocator<void> > Ht_d;

typedef boost::shared_ptr< ::ht_msg::Ht_d > Ht_dPtr;
typedef boost::shared_ptr< ::ht_msg::Ht_d const> Ht_dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ht_msg::Ht_d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ht_msg::Ht_d_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ht_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'ht_msg': ['/home/ucar/ROS_xunfei/ucar_ws/src/ht_msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ht_msg::Ht_d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ht_msg::Ht_d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ht_msg::Ht_d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ht_msg::Ht_d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ht_msg::Ht_d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ht_msg::Ht_d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ht_msg::Ht_d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75e83bb3bd22c91435365dfc6ce294b7";
  }

  static const char* value(const ::ht_msg::Ht_d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75e83bb3bd22c914ULL;
  static const uint64_t static_value2 = 0x35365dfc6ce294b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ht_msg::Ht_d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ht_msg/Ht_d";
  }

  static const char* value(const ::ht_msg::Ht_d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ht_msg::Ht_d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool detect\n"
;
  }

  static const char* value(const ::ht_msg::Ht_d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ht_msg::Ht_d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ht_d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ht_msg::Ht_d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ht_msg::Ht_d_<ContainerAllocator>& v)
  {
    s << indent << "detect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detect);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HT_MSG_MESSAGE_HT_D_H
