// Generated by gencpp from file ucar_controller/GetSensorTFResponse.msg
// DO NOT EDIT!


#ifndef UCAR_CONTROLLER_MESSAGE_GETSENSORTFRESPONSE_H
#define UCAR_CONTROLLER_MESSAGE_GETSENSORTFRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ucar_controller
{
template <class ContainerAllocator>
struct GetSensorTFResponse_
{
  typedef GetSensorTFResponse_<ContainerAllocator> Type;

  GetSensorTFResponse_()
    : pose_x(0.0)
    , pose_y(0.0)
    , pose_z(0.0)
    , euler_r(0.0)
    , euler_p(0.0)
    , euler_y(0.0)  {
    }
  GetSensorTFResponse_(const ContainerAllocator& _alloc)
    : pose_x(0.0)
    , pose_y(0.0)
    , pose_z(0.0)
    , euler_r(0.0)
    , euler_p(0.0)
    , euler_y(0.0)  {
  (void)_alloc;
    }



   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;

   typedef double _pose_z_type;
  _pose_z_type pose_z;

   typedef double _euler_r_type;
  _euler_r_type euler_r;

   typedef double _euler_p_type;
  _euler_p_type euler_p;

   typedef double _euler_y_type;
  _euler_y_type euler_y;





  typedef boost::shared_ptr< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSensorTFResponse_

typedef ::ucar_controller::GetSensorTFResponse_<std::allocator<void> > GetSensorTFResponse;

typedef boost::shared_ptr< ::ucar_controller::GetSensorTFResponse > GetSensorTFResponsePtr;
typedef boost::shared_ptr< ::ucar_controller::GetSensorTFResponse const> GetSensorTFResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ucar_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c539823f1bf23f7b686643f4bd7617b3";
  }

  static const char* value(const ::ucar_controller::GetSensorTFResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc539823f1bf23f7bULL;
  static const uint64_t static_value2 = 0x686643f4bd7617b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ucar_controller/GetSensorTFResponse";
  }

  static const char* value(const ::ucar_controller::GetSensorTFResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  pose_x\n"
"float64  pose_y\n"
"float64  pose_z\n"
"float64  euler_r\n"
"float64  euler_p\n"
"float64  euler_y\n"
;
  }

  static const char* value(const ::ucar_controller::GetSensorTFResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_z);
      stream.next(m.euler_r);
      stream.next(m.euler_p);
      stream.next(m.euler_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSensorTFResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucar_controller::GetSensorTFResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ucar_controller::GetSensorTFResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
    s << indent << "pose_z: ";
    Printer<double>::stream(s, indent + "  ", v.pose_z);
    s << indent << "euler_r: ";
    Printer<double>::stream(s, indent + "  ", v.euler_r);
    s << indent << "euler_p: ";
    Printer<double>::stream(s, indent + "  ", v.euler_p);
    s << indent << "euler_y: ";
    Printer<double>::stream(s, indent + "  ", v.euler_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UCAR_CONTROLLER_MESSAGE_GETSENSORTFRESPONSE_H
