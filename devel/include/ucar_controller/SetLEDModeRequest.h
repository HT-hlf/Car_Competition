// Generated by gencpp from file ucar_controller/SetLEDModeRequest.msg
// DO NOT EDIT!


#ifndef UCAR_CONTROLLER_MESSAGE_SETLEDMODEREQUEST_H
#define UCAR_CONTROLLER_MESSAGE_SETLEDMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ucar_controller
{
template <class ContainerAllocator>
struct SetLEDModeRequest_
{
  typedef SetLEDModeRequest_<ContainerAllocator> Type;

  SetLEDModeRequest_()
    : mode_type(0)
    , frequency(0.0)
    , red_value(0)
    , green_value(0)
    , blue_value(0)  {
    }
  SetLEDModeRequest_(const ContainerAllocator& _alloc)
    : mode_type(0)
    , frequency(0.0)
    , red_value(0)
    , green_value(0)
    , blue_value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type_type;
  _mode_type_type mode_type;

   typedef double _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _red_value_type;
  _red_value_type red_value;

   typedef uint8_t _green_value_type;
  _green_value_type green_value;

   typedef uint8_t _blue_value_type;
  _blue_value_type blue_value;



  enum {
    MODE_NORMAL = 0u,
    MODE_BLINK = 1u,
    MODE_BREATH = 2u,
  };


  typedef boost::shared_ptr< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLEDModeRequest_

typedef ::ucar_controller::SetLEDModeRequest_<std::allocator<void> > SetLEDModeRequest;

typedef boost::shared_ptr< ::ucar_controller::SetLEDModeRequest > SetLEDModeRequestPtr;
typedef boost::shared_ptr< ::ucar_controller::SetLEDModeRequest const> SetLEDModeRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ucar_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dace3ee43f4ea4c87a956cb1454d456";
  }

  static const char* value(const ::ucar_controller::SetLEDModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dace3ee43f4ea4cULL;
  static const uint64_t static_value2 = 0x87a956cb1454d456ULL;
};

template<class ContainerAllocator>
struct DataType< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ucar_controller/SetLEDModeRequest";
  }

  static const char* value(const ::ucar_controller::SetLEDModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_NORMAL = 0\n"
"uint8 MODE_BLINK  = 1\n"
"uint8 MODE_BREATH = 2\n"
"uint8   mode_type\n"
"float64 frequency\n"
"uint8 red_value\n"
"uint8 green_value\n"
"uint8 blue_value\n"
;
  }

  static const char* value(const ::ucar_controller::SetLEDModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_type);
      stream.next(m.frequency);
      stream.next(m.red_value);
      stream.next(m.green_value);
      stream.next(m.blue_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLEDModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucar_controller::SetLEDModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ucar_controller::SetLEDModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_type);
    s << indent << "frequency: ";
    Printer<double>::stream(s, indent + "  ", v.frequency);
    s << indent << "red_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red_value);
    s << indent << "green_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.green_value);
    s << indent << "blue_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blue_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UCAR_CONTROLLER_MESSAGE_SETLEDMODEREQUEST_H
